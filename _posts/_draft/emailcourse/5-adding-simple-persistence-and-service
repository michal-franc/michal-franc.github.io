 This time around we are going to add simple persistence using 'Redis'.

Why Redis? Because it is simple key value store, something like a Dictionary (or Hashtable) as a Database.

------------- image ------------- redis + service + get + post

In this scenario we have a service that calls Redis to persist data.  We need to create a Redis database and run it in Docker container and expand the microservice to call it. Some might now argue that Redis and container, leads to problems. There is some truth in that. I would run production Redis instances as separated servers. Running something state full on container is an anti pattern.

#### Why state full and containers might not end up nicely?

The idea behind container is can be replaced, easilly. Databases are state full, as they need to persist the data somewhere. In scenario where DB runs on container, data is persisted inside container. Assuming that containers are 'expendable', the same has to apply to our data, and we don't want it to be 'expendable'. [There are ways to make it more stable][0] using volumes and storing the data in the 'host' machine, but it is usually better to run DB as a standalone server, not a container. For this course, we will keep things 'simple'.


#### Creating Redis image and container

Create a folder with name 'redis' and add a Dockerfile there.

Dockerfile
```
FROM alpine
RUN apk update && apk add redis
EXPOSE 6479
ENTRYPOINT ["/usr/bin/redis-server"]
```

Alpine is a lightweight distribution of Linus. Commands:  'apk update', 'apk get' are equivalents of Ubuntu apt-get package manager.

EXPOSE is a command to 'expose' a port to other containers. This port won't be visible to the host. If you want some port visible to the host you need to use -p on run command. We did this before with micro-web examples.

ENTRYPOINT is our executable that starts Redis server. It is used when, the actual image is 'ran' generating container in the process.

```
docker build --no-cache -t workshop/redis .
```

Run the image and generate container.

```
docker run --name redis -d workshop/redis

```

Running container name is set to 'redis' - for convenience. If '--name' param is empty, Docker picks up a random name based on a dictionary of different words. Those random names are good and usable. A lot better than random blobs of characters.

Step into the container and check if Redis is running.

```
docker exec -it redis sh
```

This commands stars a shell inside the container. Exec is used to to run 'something' inside container. In this case, option -i keeps the interactive mode running and stdin open. -t allocates pseudo tty. I have no idea what that means [but check this links for more details][1]

The terminal should now switch the context and be 'inside container'. You can run normal commands here like - 'ls'. 

Start a 'redis-cli'
```
redis-cli
```
This tool enables you to communicate with Redis server. It is preinstalled with redis-server.

You can type various commands from it.

```
set test test
KEYS *
get test
```

Set saves the value in specified key. Get retrieves the value and KEYS show the list off all the matching keys. 

There is one important command that we need to run now.
```
CONFIG SET protected-mode no
```
By default, Redis works in a protected mode and allows access, for the cli tool, from loop-back interface only - localhost. We will, later on, be connecting to Redis from a different container using Redis-CLI and this protection has to be taken off for that. This, of course, is an unsafe option for production. Don't try it home.

To exit cli and the terminal in container.

```
exit
exit
```

To test if redis instance is running, plus if we can connect to it. We will create a new container based on alpine.

```
docker run --link redis:db -it alpine sh
```
This is a 'base' container only with alpine in it. This commands starts the container, generates a link to redis container and also starts a shell inside it. 

```
-- link redis:db
```
* redis - name of the container with redis
* db - name of the link, this is used in env variables generated by link

This command is fast as the alpine image has already been downloaded and cached when building Redis server.

We should be now inside this container. To check connection let's use redis-cli. Like I said before. This tool is preinstalled with redis-server. We need to install redis manually now.

```
apk update
apk add redis
```

Same commands are executed by Docker when building images. Now you see exactly what Docker does when generating them.

After that is done we can connect to Redis

Let's check Env variables.

```
env
```

There should be one called DB_PORT_6479_TCP_ADDR. This is the one we need to use to connect to Redis on a different container.

```
redis-cli -h $DB_PORT_6479_TCP_ADDR
```

We can once again run 

```
KEYS *
```

If you want to touch more topics around Docker:
- 

#### Creating Microservice that talks to Redis

Redis is ready and waiting to get the data. Time to create a service that can do that.

Create a new copy of micro-web called micro-db.

```
cp -rf micro-web micro-db
```

I checked for different .NET SDK for Redis and 'StackExchange.Redis' looks like the best option. It is also from 'StackExhange' team, so should be solid.

Create new controller - RedisController.
```
using System;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using StackExchange.Redis;

[Route("redis")]
public class RedisController : Controller
{
  ConnectionMultiplexer redis;
  ILogger _logger;
```

'StackExchange.Redis' uses ConnectionMultiplexer to generate connection to db instance. It is an abstraction that enables communication to many different instances on different servers/container. We can of course use it in our 'single' scenario. 

Constructor
```
public RedisController(ILogger<RedisController> logger)
{
    _logger = logger;

    try
    {
        var envName = "DB_PORT_6479_TCP_ADDR";
        var redisAddress = Environment.GetEnvironmentVariable(envName);

        _logger.LogInformation($"Connecitng to redis on {redisAddress}");

        redis = ConnectionMultiplexer.Connect(redisAddress);
    }
    catch(Exception ex)
    {
        _logger.LogError($"Cannot connect to Redis - {ex.Message}", ex);
        throw ex;
    }
}
```
We use Environment variables to get the redis ip address.

To call redis, add simple GET and POST endpoints.

```
[HttpGet]
[Route("{key}")]
public string Get(string key)
{
    IDatabase db = redis.GetDatabase();
    var value = db.StringGet(key);
    return value; 
}
```

And a POST one.

```
[Route("{key}/{value}")]
[HttpPost]
public string Post(string key, string value)
{
    IDatabase db = redis.GetDatabase();
    db.StringSet(key, value);
    return $"Saved '{key}' with '{value}'";
}
```

In both of these, we use the multiplexer to get the DB connection and use Get, Set just like using - redis-cli tool.

Time to test it.

```
docker build -t workshop/micro-db .
docker run -link redis:db -d -p 5010:5010 workshop/micro-db 5010
```

Remember to name the link as db, as the env name is hardcoded for now.

```
http post localhost:5010/redis/hello/world                       
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Sun, 18 Jun 2017 18:33:02 GMT
Server: Kestrel
Transfer-Encoding: chunked

Saved 'hello' with 'world'
```
```
HTTP localhost:5010/redis/hello/     
HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8
Date: Sun, 18 Jun 2017 18:34:05 GMT
Server: Kestrel
Transfer-Encoding: chunked

world
```

SH into the container and check if the data is there.

```
docker exec -it redis sh
/ # redis-cli
127.0.0.1:6379> KEYS *
1) "hello"
```

#### Stabilising the code a bit

This was a proof of concept, the code is a bit unstable.

- stabilise the code

#### Expanding HealthCheck

The last step to do is expand the health check so that it is aware of the Redis. Redis is now an integral part of our app. If it's not available the app can't function.


#### More Links
- [Nice Docker Overview][2]

[0]:https://docs.docker.com/engine/tutorials/dockervolumes/
[1]:https://stackoverflow.com/questions/30137135/confused-about-docker-t-option-to-allocate-a-pseudo-tty
[2]: https://docs.docker.com/engine/docker-overview/ 
